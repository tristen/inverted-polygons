{"version":3,"sources":["components/app.js","index.js","util/invert-polygons.js"],"names":["DEFAULT_HELP","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mapContainer","setMapContainer","el","onDownload","blob","Blob","JSON","stringify","state","geojson","type","saveAs","onClear","setState","helpText","map","removeLayer","removeSource","onUpload","files","react_default","a","createElement","className","reader","FileReader","addEventListener","d","parsed","result","parse","target","invertPolygons","bbox","e","message","getSource","setData","addSource","data","addLayer","id","source","paint","fill-color","line-color","fitBounds","easing","readAsText","window","mapboxgl","accessToken","Map","container","style","center","zoom","hash","_this$state","_this$props","connectDropTarget","isOver","onClick","concat","ref","React","PureComponent","withDragDrop","DropTarget","NativeTypes","FILE","drop","monitor","component","getItem","connect","dropTarget","DragDropContext","HTML5Backend","ReactDOM","render","app","document","getElementById","rewind","require","flatten","root","features","properties","geometry","coordinates","module","exports","rewound","default","error","console","log","forEach","f","push"],"mappings":"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","file":"static/js/main.b88fbc83.chunk.js","sourcesContent":["import React from 'react'\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { DragDropContext, DropTarget } from 'react-dnd'\nimport { NativeTypes } from 'react-dnd-html5-backend'\nimport { saveAs } from 'file-saver'\nimport invertPolygons from '../util/invert-polygons'\nimport bbox from '@turf/bbox'\n\nconst DEFAULT_HELP = 'Drag and drop GeoJSON containing polygons on the map.';\n\nclass App extends React.PureComponent {\n  mapContainer = null;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      geojson: null,\n      helpText: DEFAULT_HELP\n    };\n  }\n\n  componentDidMount() {\n    window.mapboxgl.accessToken = 'pk.eyJ1IjoidHJpc3RlbiIsImEiOiJjanZhZjlrd3EwanpoNDN0ZHhsbDFvd2F2In0.0pfXaCB-i3h6VLEIPSDaXw';\n    this.map = new window.mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [5, 34],\n      zoom: 1.5,\n      hash: true\n    });\n  }\n\n  setMapContainer = el => this.mapContainer = el;\n\n  onDownload = () => {\n    const blob = new Blob([\n      JSON.stringify(this.state.geojson, null, 2)\n    ], {\n      type: 'text/plain;charset=utf-8'\n    });\n\n    saveAs(blob, 'inverted.geojson');\n  };\n\n  onClear = () => {\n    this.setState({\n      geojson: null,\n      helpText: DEFAULT_HELP\n    }, () => {\n      this.map.removeLayer('inverted-poly-fill');\n      this.map.removeLayer('inverted-poly-line');\n      this.map.removeSource('geojson');\n    });\n  };\n\n  onUpload = files => {\n    this.setState({\n      helpText: (\n        <span className=\"loading loading--s loading--dark\" />\n      )\n    });\n\n    const reader = new FileReader();\n    reader.addEventListener('load', d => {\n      let parsed;\n      let result;\n\n      try {\n        parsed = JSON.parse(d.target.result);\n        result = invertPolygons(parsed);\n        bbox(parsed);\n      } catch(e) {\n        this.setState({\n          helpText: e.message\n        });\n      }\n\n      this.setState({\n        geojson: result,\n        helpText: 'Download, drag more, or press clear to start over'\n      }, () => {\n        if (this.map.getSource('geojson')) {\n          this.map.getSource('geojson').setData(result);\n        } else {\n          this.map.addSource('geojson', {\n            type: 'geojson',\n            data: result\n          });\n\n          this.map.addLayer({\n            id: 'inverted-poly-fill',\n            type: 'fill',\n            source: 'geojson',\n            paint: {\n              'fill-color': 'hsla(229, 96%, 62%, 0.52)'\n            }\n          });\n\n          this.map.addLayer({\n            id: 'inverted-poly-line',\n            type: 'line',\n            source: 'geojson',\n            paint: {\n              'line-color': 'hsl(229, 96%, 62%)'\n            }\n          });\n        }\n\n        if (bbox(parsed)) {\n          this.map.fitBounds(bbox(parsed), {\n            easing: () => 1\n          });\n        }\n      });\n    });\n\n    reader.readAsText(files[0]);\n  };\n\n  render() {\n    const { helpText, geojson } = this.state;\n    const { connectDropTarget, isOver } = this.props;\n\n    return connectDropTarget(\n      <div>\n        <div className=\"flex-parent flex-parent--end-cross flex-parent--center-main absolute top right bottom left\">\n          <div className=\"bg-darken75 py6 px6 flex-child mb24 z1 txt-s txt-bold flex-parent flex-parent--center-cross round-full hmin30\">\n            <div className=\"flex-child color-white inline-block round-l-full px12\">\n              {helpText}\n            </div>\n\n            <div className=\"flex-parent\">\n              {geojson && <button className=\"flex-child btn btn--gray px24 round-l\" onClick={this.onClear}>\n                Clear\n              </button>}\n              <button className={`${geojson ? 'round-r-full' : 'round-full'} flex-child btn btn--green px24`} onClick={this.onDownload}>\n                Download\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {isOver && <div className=\"bg-darken25 fixed left right top bottom events-none z5\" />}\n        <div ref={this.setMapContainer} className=\"absolute top right left bottom\" />\n      </div>\n    );\n  }\n}\n\nconst dropTarget = {\n  drop: (props, monitor, component) =>\n    component.onUpload(monitor.getItem().files)\n};\n\nconst withDragDrop = DropTarget(\n  NativeTypes.FILE,\n  dropTarget,\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver()\n  })\n);\n\nexport default DragDropContext(HTML5Backend)(withDragDrop(App));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('app'));\n","const rewind = require('@mapbox/geojson-rewind');\nconst flatten = require('geojson-flatten');\n\nconst root = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[180, 90], [-180, 90], [-180, -90], [180, -90], [180, 90]]]\n      }\n    }\n  ]\n};\n\nfunction invertPolygons(geojson) {\n  const rewound = flatten.default(rewind(geojson));\n\n  try {\n    flatten.default(geojson);\n  } catch (error) {\n    console.log('eerror!', error);\n  }\n\n  rewound.features.forEach(f => {\n    const { type } = f.geometry;\n    if (type === 'Polygon') {\n      root.features[0].geometry.coordinates.push(f.geometry.coordinates[0]);\n    }\n  });\n\n  return root;\n}\n\nmodule.exports = invertPolygons;\n"],"sourceRoot":""}